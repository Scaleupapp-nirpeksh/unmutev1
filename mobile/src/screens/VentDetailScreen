// File: mobile/src/screens/VentDetailScreen.js
// Purpose: Display a single vent with reactions and comments

import React, { useState, useEffect, useRef } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Animated,
  StatusBar,
  SafeAreaView,
  FlatList,
  Modal,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import { Ionicons } from "@expo/vector-icons";
import { useFonts, Poppins_600SemiBold, Poppins_500Medium, Poppins_400Regular } from "@expo-google-fonts/poppins";
import { Inter_500Medium, Inter_400Regular } from "@expo-google-fonts/inter";
import Toast from "react-native-toast-message";
import { useApp } from "../context/AppContext";
import { useAuth } from "../context/AuthContext";

// Enhanced vibrant colors
const COLORS = {
  primary: "#4B77BE",
  gradient: {
    start: "#5D8FD9", 
    middle: "#4A7FD7",
    end: "#3A6BC6"
  },
  text: {
    dark: "#2C3E50",
    medium: "#566573",
    light: "#ABB2B9"
  },
  card: "rgba(255, 255, 255, 0.98)",
  error: "#E74C3C",
  accent: "#FF5733",
  success: "#2ECC71",
  vent: "#E91E63",
  divider: "rgba(0,0,0,0.07)",
  inputBg: "rgba(245, 247, 250, 0.8)",
  reactions: {
    supportive: "#27AE60",
    same: "#3498DB",
    hugs: "#F39C12",
    heart: "#E74C3C",
    notAlone: "#9B59B6"
  }
};

// Get reaction icon based on type
const getReactionIcon = (type) => {
  switch (type) {
    case 'supportive': return "thumbs-up";
    case 'same': return "checkmark-circle";
    case 'hugs': return "hand-left";
    case 'heart': return "heart";
    case 'notAlone': return "people";
    default: return "heart";
  }
};

// Get formatted date
const formatDate = (dateString) => {
  const date = new Date(dateString);
  const now = new Date();
  const diffMs = now - date;
  const diffSec = Math.floor(diffMs / 1000);
  const diffMin = Math.floor(diffSec / 60);
  const diffHours = Math.floor(diffMin / 60);
  const diffDays = Math.floor(diffHours / 24);

  if (diffDays > 7) {
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
    });
  } else if (diffDays > 0) {
    return diffDays === 1 ? 'yesterday' : `${diffDays} days ago`;
  } else if (diffHours > 0) {
    return diffHours === 1 ? '1 hour ago' : `${diffHours} hours ago`;
  } else if (diffMin > 0) {
    return diffMin === 1 ? '1 minute ago' : `${diffMin} minutes ago`;
  } else {
    return 'just now';
  }
};

const VentDetailScreen = ({ route, navigation }) => {
  const { ventId } = route.params;
  
  // State
  const [vent, setVent] = useState(null);
  const [reactionCounts, setReactionCounts] = useState({});
  const [userReaction, setUserReaction] = useState(null);
  const [loading, setLoading] = useState(true);
  const [commentText, setCommentText] = useState("");
  const [addingComment, setAddingComment] = useState(false);
  const [showReportDialog, setShowReportDialog] = useState(false);
  const [reportReason, setReportReason] = useState("");
  const [submittingReport, setSubmittingReport] = useState(false);
  
  // Context
  const { getVent, reactToVent, commentOnVent, reportVent } = useApp();
  const { user } = useAuth();
  
  // Animation values
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(20)).current;
  const reportDialogAnim = useRef(new Animated.Value(0)).current;
  
  // Create reaction animations
  const supportiveAnim = useRef(new Animated.Value(0)).current;
  const sameAnim = useRef(new Animated.Value(0)).current;
  const hugsAnim = useRef(new Animated.Value(0)).current;
  const heartAnim = useRef(new Animated.Value(0)).current;
  const notAloneAnim = useRef(new Animated.Value(0)).current;
  
  const reactionAnimations = {
    supportive: supportiveAnim,
    same: sameAnim,
    hugs: hugsAnim,
    heart: heartAnim,
    notAlone: notAloneAnim
  };
  
  // Load fonts
  const [fontsLoaded] = useFonts({
    Poppins_600SemiBold,
    Poppins_500Medium,
    Poppins_400Regular,
    Inter_500Medium,
    Inter_400Regular
  });
  
  // Start animations
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 400,
        useNativeDriver: true
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 400,
        useNativeDriver: true
      })
    ]).start();
  }, []);
  
  // Fetch vent data
  useEffect(() => {
    loadVent();
  }, [ventId]);
  
  // Report dialog animation
  useEffect(() => {
    Animated.timing(reportDialogAnim, {
      toValue: showReportDialog ? 1 : 0,
      duration: 300,
      useNativeDriver: true
    }).start();
  }, [showReportDialog]);
  
  // Load vent data
  const loadVent = async () => {
    setLoading(true);
    try {
      const response = await getVent(ventId);
      if (response) {
        setVent(response);
        
        // Calculate reaction counts
        const counts = response.reactions.reduce((acc, reaction) => {
          const type = reaction.reactionType;
          acc[type] = (acc[type] || 0) + 1;
          return acc;
        }, {});
        setReactionCounts(counts);
        
        // Check if user has reacted
        const userReact = response.reactions.find(
          r => r.userId === user._id
        );
        setUserReaction(userReact ? userReact.reactionType : null);
        
        // Animate user's current reaction
        if (userReact) {
          Animated.timing(reactionAnimations[userReact.reactionType], {
            toValue: 1,
            duration: 0,
            useNativeDriver: true
          }).start();
        }
      }
    } catch (error) {
      console.error("Error loading vent:", error);
      Toast.show({
        type: 'error',
        text1: 'Couldn\'t load vent',
        text2: 'Please try again',
        position: 'bottom'
      });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle reaction
  const handleReaction = async (reactionType) => {
    // If already reacted with same type, remove it
    const isRemovingReaction = userReaction === reactionType;
    
    // Optimistic UI update
    if (isRemovingReaction) {
      // Remove reaction
      setUserReaction(null);
      setReactionCounts({
        ...reactionCounts,
        [reactionType]: Math.max(0, (reactionCounts[reactionType] || 0) - 1)
      });
      
      // Animate button
      Animated.timing(reactionAnimations[reactionType], {
        toValue: 0,
        duration: 200,
        useNativeDriver: true
      }).start();
    } else {
      // If changing reaction type, decrement previous type
      if (userReaction) {
        setReactionCounts({
          ...reactionCounts,
          [userReaction]: Math.max(0, (reactionCounts[userReaction] || 0) - 1)
        });
        
        // Animate previous reaction button
        Animated.timing(reactionAnimations[userReaction], {
          toValue: 0,
          duration: 200,
          useNativeDriver: true
        }).start();
      }
      
      // Set new reaction
      setUserReaction(reactionType);
      setReactionCounts({
        ...reactionCounts,
        [reactionType]: (reactionCounts[reactionType] || 0) + 1
      });
      
      // Animate button
      Animated.sequence([
        Animated.timing(reactionAnimations[reactionType], {
          toValue: 1.3,
          duration: 200,
          useNativeDriver: true
        }),
        Animated.timing(reactionAnimations[reactionType], {
          toValue: 1,
          duration: 200,
          useNativeDriver: true
        })
      ]).start();
    }
    
    // Send to server
    try {
      await reactToVent(ventId, reactionType);
    } catch (error) {
      console.error("Error reacting to vent:", error);
      // Revert optimistic update if needed
      loadVent();
    }
  };
  
  // Post a comment
  const handlePostComment = async () => {
    if (!commentText.trim()) return;
    
    setAddingComment(true);
    try {
      const result = await commentOnVent(ventId, commentText.trim());
      if (result.success) {
        // Refresh vent to show new comment
        await loadVent();
        setCommentText("");
        
        Toast.show({
          type: 'success',
          text1: 'Comment added',
          position: 'bottom'
        });
      } else {
        Toast.show({
          type: 'error',
          text1: 'Couldn\'t add comment',
          text2: result.message || 'Please try again',
          position: 'bottom'
        });
      }
    } catch (error) {
      console.error("Error posting comment:", error);
      Toast.show({
        type: 'error',
        text1: 'Something went wrong',
        position: 'bottom'
      });
    } finally {
      setAddingComment(false);
    }
  };
  
  // Handle reporting
  const handleSubmitReport = async () => {
    if (!reportReason.trim()) {
      Toast.show({
        type: 'error',
        text1: 'Please provide a reason',
        position: 'bottom'
      });
      return;
    }
    
    setSubmittingReport(true);
    try {
      const result = await reportVent(ventId, reportReason.trim());
      if (result.success) {
        setShowReportDialog(false);
        setReportReason("");
        
        Toast.show({
          type: 'success',
          text1: 'Report submitted',
          text2: 'Thank you for helping keep the community safe',
          position: 'bottom'
        });
      } else {
        Toast.show({
          type: 'error',
          text1: 'Couldn\'t submit report',
          text2: result.message || 'Please try again',
          position: 'bottom'
        });
      }
    } catch (error) {
      console.error("Error reporting vent:", error);
      Toast.show({
        type: 'error',
        text1: 'Something went wrong',
        position: 'bottom'
      });
    } finally {
      setSubmittingReport(false);
    }
  };
  
  // Render reactions
  const renderReactions = () => {
    return (
      <View style={styles.reactionsContainer}>
        {['supportive', 'same', 'hugs', 'heart', 'notAlone'].map((type) => (
          <TouchableOpacity
            key={type}
            style={styles.reactionButton}
            onPress={() => handleReaction(type)}
            activeOpacity={0.7}
          >
            <Animated.View style={{
              transform: [{ scale: reactionAnimations[type] }]
            }}>
              <Ionicons
                name={getReactionIcon(type)}
                size={28}
                color={userReaction === type ? COLORS.reactions[type] : COLORS.text.light}
              />
            </Animated.View>
            <Text style={[
              styles.reactionCount,
              userReaction === type && { color: COLORS.reactions[type] }
            ]}>
              {reactionCounts[type] || 0}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  };
  
  // Render comments
  const renderComments = () => {
    if (!vent || !vent.comments || vent.comments.length === 0) {
      return (
        <View style={styles.emptyCommentsContainer}>
          <Ionicons name="chatbubble-outline" size={40} color={COLORS.text.light} />
          <Text style={styles.emptyCommentsText}>No comments yet</Text>
          <Text style={styles.emptyCommentsSubtext}>Be the first to share your thoughts</Text>
        </View>
      );
    }
    
    return (
      <FlatList
        data={vent.comments}
        keyExtractor={(item, index) => `comment-${index}`}
        renderItem={({ item }) => (
          <View style={styles.commentItem}>
            <View style={styles.commentHeader}>
              <View style={styles.commentAuthorContainer}>
                <View style={styles.commentAvatar}>
                  <Ionicons name="person" size={16} color="#FFF" />
                </View>
                <Text style={styles.commentAuthor}>
                  {item.userId.username || "Anonymous"}
                </Text>
              </View>
              <Text style={styles.commentTime}>{formatDate(item.createdAt)}</Text>
            </View>
            <Text style={styles.commentContent}>{item.content}</Text>
          </View>
        )}
        ListHeaderComponent={
          <Text style={styles.commentsTitle}>
            Comments ({vent.comments.length})
          </Text>
        }
        scrollEnabled={false}
      />
    );
  };
  
  // Loading state
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={COLORS.vent} />
      </View>
    );
  }
  
  // Error state
  if (!vent) {
    return (
      <View style={styles.errorContainer}>
        <Ionicons name="alert-circle-outline" size={64} color="#FFF" />
        <Text style={styles.errorText}>Couldn't load this vent</Text>
        <TouchableOpacity
          style={styles.tryAgainButton}
          onPress={loadVent}
        >
          <Text style={styles.tryAgainButtonText}>Try Again</Text>
        </TouchableOpacity>
      </View>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" translucent backgroundColor="transparent" />
      <LinearGradient 
        colors={[COLORS.gradient.start, COLORS.gradient.middle, COLORS.gradient.end]} 
        style={StyleSheet.absoluteFill}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Ionicons name="arrow-back" size={24} color="#FFF" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Vent Detail</Text>
        <TouchableOpacity
          style={styles.reportButton}
          onPress={() => setShowReportDialog(true)}
        >
          <Ionicons name="flag-outline" size={24} color="#FFF" />
        </TouchableOpacity>
      </View>
      
      <KeyboardAvoidingView
        style={styles.flex}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        keyboardVerticalOffset={Platform.OS === "ios" ? 90 : 70}
      >
        <ScrollView
          style={styles.flex}
          showsVerticalScrollIndicator={false}
        >
          <Animated.View
            style={[
              styles.contentContainer,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }]
              }
            ]}
          >
            {/* Author Info */}
            <View style={styles.authorContainer}>
              <View style={styles.avatar}>
                <Ionicons name="person" size={24} color="#FFF" />
              </View>
              <View style={styles.authorInfo}>
                <Text style={styles.authorName}>Anonymous</Text>
                <Text style={styles.postTime}>{formatDate(vent.createdAt)}</Text>
              </View>
            </View>
            
            {/* Vent Content */}
            <View style={styles.ventContent}>
              <Text style={styles.ventTitle}>{vent.title}</Text>
              <Text style={styles.ventText}>{vent.content}</Text>
              
              {/* Tags */}
              {vent.tags && vent.tags.length > 0 && (
                <View style={styles.tagsContainer}>
                  {vent.tags.map((tag) => (
                    <TouchableOpacity
                      key={tag}
                      style={styles.tagChip}
                      onPress={() => navigation.navigate("Vents", { tag })}
                    >
                      <Text style={styles.tagText}>#{tag}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              )}
            </View>
            
            {/* Reactions */}
            {renderReactions()}
            
            {/* Divider */}
            <View style={styles.divider} />
            
            {/* Comments Section */}
            <View style={styles.commentsSection}>
              {renderComments()}
            </View>
          </Animated.View>
        </ScrollView>
        
        {/* Comment Input */}
        {vent.allowComments && (
          <View style={styles.commentInputContainer}>
            <View style={styles.commentInputWrapper}>
              <TextInput
                style={styles.commentInput}
                placeholder="Add a comment..."
                placeholderTextColor={COLORS.text.light}
                value={commentText}
                onChangeText={setCommentText}
                multiline
              />
            </View>
            <TouchableOpacity
              style={[
                styles.postButton,
                (!commentText.trim() || addingComment) && styles.postButtonDisabled
              ]}
              onPress={handlePostComment}
              disabled={!commentText.trim() || addingComment}
            >
              {addingComment ? (
                <ActivityIndicator size="small" color="#FFF" />
              ) : (
                <Ionicons name="send" size={20} color="#FFF" />
              )}
            </TouchableOpacity>
          </View>
        )}
      </KeyboardAvoidingView>
      
      {/* Report Dialog */}
      <Modal
        visible={showReportDialog}
        transparent
        animationType="fade"
        onRequestClose={() => setShowReportDialog(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowReportDialog(false)}
        >
          <Animated.View
            style={[
              styles.reportDialog,
              {
                opacity: reportDialogAnim,
                transform: [
                  { scale: reportDialogAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [0.9, 1]
                  })}
                ]
              }
            ]}
          >
            <TouchableOpacity 
              activeOpacity={1}
              onPress={(e) => e.stopPropagation()}
            >
              <View style={styles.reportDialogContent}>
                <Text style={styles.reportDialogTitle}>Report this vent</Text>
                <Text style={styles.reportDialogSubtitle}>
                  Let us know why you think this content violates our community guidelines
                </Text>
                
                <TextInput
                  style={styles.reportInput}
                  placeholder="Reason for reporting"
                  placeholderTextColor={COLORS.text.light}
                  value={reportReason}
                  onChangeText={setReportReason}
                  multiline
                  numberOfLines={4}
                  textAlignVertical="top"
                />
                
                <View style={styles.reportDialogButtons}>
                  <TouchableOpacity
                    style={styles.cancelReportButton}
                    onPress={() => setShowReportDialog(false)}
                  >
                    <Text style={styles.cancelReportText}>Cancel</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity
                    style={[
                      styles.submitReportButton,
                      (!reportReason.trim() || submittingReport) && styles.submitReportButtonDisabled
                    ]}
                    onPress={handleSubmitReport}
                    disabled={!reportReason.trim() || submittingReport}
                  >
                    {submittingReport ? (
                      <ActivityIndicator size="small" color="#FFF" />
                    ) : (
                      <Text style={styles.submitReportText}>Submit</Text>
                    )}
                  </TouchableOpacity>
                </View>
              </View>
            </TouchableOpacity>
          </Animated.View>
        </TouchableOpacity>
      </Modal>
      
      <Toast />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.primary,
  },
  flex: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.primary,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.primary,
    padding: 20,
  },
  errorText: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 18,
    color: '#FFF',
    marginTop: 16,
    marginBottom: 24,
    textAlign: 'center',
  },
  tryAgainButton: {
    backgroundColor: COLORS.card,
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
  },
  tryAgainButtonText: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 16,
    color: COLORS.primary,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    height: 60,
    backgroundColor: 'rgba(0,0,0,0.05)',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 18,
    color: '#FFF',
  },
  reportButton: {
    padding: 8,
  },
  contentContainer: {
    padding: 16,
  },
  authorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  avatar: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  authorInfo: {
    flex: 1,
  },
  authorName: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 16,
    color: '#FFF',
  },
  postTime: {
    fontFamily: 'Inter_400Regular',
    fontSize: 12,
    color: 'rgba(255,255,255,0.7)',
  },
  ventContent: {
    backgroundColor: COLORS.card,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  ventTitle: {
    fontFamily: 'Poppins_600SemiBold',
    fontSize: 20,
    color: COLORS.text.dark,
    marginBottom: 12,
  },
  ventText: {
    fontFamily: 'Inter_400Regular',
    fontSize: 16,
    lineHeight: 24,
    color: COLORS.text.dark,
    marginBottom: 16,
  },
  tagsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  tagChip: {
    backgroundColor: 'rgba(233, 30, 99, 0.1)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginRight: 8,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: 'rgba(233, 30, 99, 0.3)',
  },
  tagText: {
    fontFamily: 'Inter_500Medium',
    fontSize: 14,
    color: COLORS.vent,
  },
  reactionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: COLORS.card,
    borderRadius: 16,
    padding: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  reactionButton: {
    alignItems: 'center',
    padding: 8,
  },
  reactionCount: {
    fontFamily: 'Inter_500Medium',
    fontSize: 14,
    color: COLORS.text.medium,
    marginTop: 4,
  },
  divider: {
    height: 1,
    backgroundColor: COLORS.divider,
    marginVertical: 16,
  },
  commentsSection: {
    backgroundColor: COLORS.card,
    borderRadius: 16,
    padding: 16,
    marginBottom: 80,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  commentsTitle: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 18,
    color: COLORS.text.dark,
    marginBottom: 16,
  },
  emptyCommentsContainer: {
    alignItems: 'center',
    padding: 24,
  },
  emptyCommentsText: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 16,
    color: COLORS.text.dark,
    marginTop: 12,
    marginBottom: 4,
  },
  emptyCommentsSubtext: {
    fontFamily: 'Inter_400Regular',
    fontSize: 14,
    color: COLORS.text.medium,
    textAlign: 'center',
  },
  commentItem: {
    marginBottom: 16,
    backgroundColor: 'rgba(245, 247, 250, 0.5)',
    borderRadius: 12,
    padding: 12,
  },
  commentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  commentAuthorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  commentAvatar: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
  },
  commentAuthor: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 14,
    color: COLORS.text.dark,
  },
  commentTime: {
    fontFamily: 'Inter_400Regular',
    fontSize: 12,
    color: COLORS.text.light,
  },
  commentContent: {
    fontFamily: 'Inter_400Regular',
    fontSize: 14,
    lineHeight: 20,
    color: COLORS.text.dark,
  },
  commentInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#FFF',
    borderTopWidth: 1,
    borderTopColor: COLORS.divider,
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
  },
  commentInputWrapper: {
    flex: 1,
    backgroundColor: COLORS.inputBg,
    borderRadius: 20,
    paddingHorizontal: 16,
    marginRight: 12,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.05)',
  },
  commentInput: {
    fontFamily: 'Inter_400Regular',
    fontSize: 14,
    color: COLORS.text.dark,
    minHeight: 36,
    maxHeight: 80,
    paddingVertical: 8,
  },
  postButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.vent,
    justifyContent: 'center',
    alignItems: 'center',
  },
  postButtonDisabled: {
    opacity: 0.6,
  },
  modalOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  reportDialog: {
    width: '85%',
    backgroundColor: '#FFF',
    borderRadius: 16,
    overflow: 'hidden',
  },
  reportDialogContent: {
    padding: 20,
  },
  reportDialogTitle: {
    fontFamily: 'Poppins_600SemiBold',
    fontSize: 18,
    color: COLORS.text.dark,
    marginBottom: 8,
  },
  reportDialogSubtitle: {
    fontFamily: 'Inter_400Regular',
    fontSize: 14,
    color: COLORS.text.medium,
    marginBottom: 16,
  },
  reportInput: {
    backgroundColor: COLORS.inputBg,
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: COLORS.text.dark,
    minHeight: 100,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.05)',
  },
  reportDialogButtons: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
  cancelReportButton: {
    paddingHorizontal: 16,
    paddingVertical: 10,
    marginRight: 12,
  },
  cancelReportText: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 14,
    color: COLORS.text.medium,
  },
  submitReportButton: {
    backgroundColor: COLORS.error,
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
  },
  submitReportButtonDisabled: {
    opacity: 0.6,
  },
  submitReportText: {
    fontFamily: 'Poppins_500Medium',
    fontSize: 14,
    color: '#FFF',
  },
});

export default VentDetailScreen;